#$source ./venv2/bin/activate
#python開発環境仮想環境venv2のbin/bash SHELLでの起動コマンド


#モジュール導入と設定少々
from __future__ import absolute_import, division, print_function, unicode_literals
import tensorflow as tf
import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np
import os
import pandas as pd
 
mpl.rcParams['figure.figsize'] = (8, 6)
mpl.rcParams['axes.grid'] = False


#データの読み込み(csv)
df = pd.read_csv('/Users/nakagawamasaki/venv2/datasets/nm2.csv')
df.head()


#注意！　今回はスキップ　データの分割   l 84,87がエラーになるため
#column_indices = {name: i for i, name in enumerate(df.columns)}

#n = len(df)
#train_df = df[0:int(n*0.7)]
#val_df = df[int(n*0.7):int(n*0.9)]
#test_df = df[int(n*0.9):]

#num_features = df.shape[1]


#train_df.head()
#val_df.head()
#test_df.head()



#ランダムにならないようにシード価固定
tf.random.set_seed(15)

#定義　インタプリタモード　Ctrl-Eを押すと、貼付けモードとなり、基本的に自動インデント機能が無効となり貼付けモードでは、空白行を貼り付けることができるようになります。ファイルであるかのように貼り付けたテキストがコンパイルされます。Ctrl+Dキーを押すと、ペーストモードを終了し、コンパイルを開始します。
def univariate_data(dataset, start_index, end_index, history_size, target_size):
 data = []
 labels = []
 
 start_index = start_index + history_size
 if end_index is None:
    end_index = len(dataset) - target_size
 
 for i in range(start_index, end_index):
    indices = range(i-history_size, i)
    # Reshape data from (history_size,) to (history_size, 1)
    data.append(np.reshape(dataset[indices], (history_size, 1)))
    labels.append(dataset[i+target_size])
 return np.array(data), np.array(labels)


#単一データのセット
uni_data = df['Showa']
uni_data.index = df['Time']
uni_data.head()

#array([],dtype=object)と返される
uni_data.plot(subplots=True)

#代入？
uni_data = uni_data.values



#今回こっちでデータをtrainにする
TRAIN_SPLIT = 320


#mean平均　と　std標準偏差
uni_train_mean = uni_data[:TRAIN_SPLIT].mean()
uni_train_std = uni_data[:TRAIN_SPLIT].std()

uni_data = (uni_data-uni_train_mean)/uni_train_std
#これは正規化



#モデルは最後の 20/300(必要に応じてかえる)の記録されたデータが与えられて、そして次の時間ステップで予測することを学習する
univariate_past_history = 100
univariate_future_target = 0
x_train_uni, y_train_uni = univariate_data(uni_data, 0, TRAIN_SPLIT,
                                           univariate_past_history,
                                           univariate_future_target)
x_val_uni, y_val_uni = univariate_data(uni_data, TRAIN_SPLIT, None,
                                       univariate_past_history,
                                       univariate_future_target)


print ('Single window of past history')
print (x_train_uni[0])
print ('\n Target showa to predict')
print (y_train_uni[0])



#サンプルを見る
def create_time_steps(length):
  time_steps = []
  for i in range(-length, 0, 1):
    time_steps.append(i)
  return time_steps



def show_plot(plot_data, delta, title):
  labels = ['History', 'True Future', 'Model Prediction']
  marker = ['.-', 'rx', 'go']
  time_steps = create_time_steps(plot_data[0].shape[0])
  if delta:
    future = delta
  else:
    future = 0
  plt.title(title)
  for i, x in enumerate(plot_data):
    if i:
      plt.plot(future, plot_data[i], marker[i], markersize=10,
               label=labels[i])
    else:
      plt.plot(time_steps, plot_data[i].flatten(), marker[i], label=labels[i])
  plt.legend()
  plt.xlim([time_steps[0], (future+5)*2])
  plt.xlabel('Time-Step')
  return plt
  

  



def baseline(history):
  return np.mean(history)


show_plot([x_train_uni[0], y_train_uni[0], baseline(x_train_uni[0])], 0,
           'Baseline Prediction Example')

           


#RNNを使用  データセットを shuffle, batch と cache するために tf.data を使用


BATCH_SIZE = 256
BUFFER_SIZE = 10000
 
train_univariate = tf.data.Dataset.from_tensor_slices((x_train_uni, y_train_uni))
train_univariate = train_univariate.cache().shuffle(BUFFER_SIZE).batch(BATCH_SIZE).repeat()
 
val_univariate = tf.data.Dataset.from_tensor_slices((x_val_uni, y_val_uni))
val_univariate = val_univariate.batch(BATCH_SIZE).repeat()




simple_lstm_model = tf.keras.models.Sequential([
    tf.keras.layers.LSTM(8, input_shape=x_train_uni.shape[-2:]),
    tf.keras.layers.Dense(1)
])
 
simple_lstm_model.compile(optimizer='adam', loss='mae')


#出力確認のためサンプル作成
for x, y in val_univariate.take(1):
    print(simple_lstm_model.predict(x).shape)
    
    




EVALUATION_INTERVAL = 250
EPOCHS = 10
 
simple_lstm_model.fit(train_univariate, epochs=EPOCHS,
                      steps_per_epoch=EVALUATION_INTERVAL,
                      validation_data=val_univariate, validation_steps=50)
                      
                      
                      
                      
                      
                      
                      
                      
                      
                      
                
for x, y in val_univariate.take(3):
  plot = show_plot([x[0].numpy(), y[0].numpy(),
                    simple_lstm_model.predict(x)[0]], 0, 'Simple LSTM model')
  plot.show()
